Testbench
// Code your testbench here
// or browse Examples
module ALU_Tb;
  reg[7:0] A;
  reg [7:0]B;
  reg[2:0] opcode;
  wire[15:0] result;
  wire zero;
  ALU uut(A,B,opcode,result,zero); //Instantiate ALU
  
  initial begin
    $dumpfile("ALU_wave.vcd");
    $dumpvars(0, ALU_Tb);
  
    A=4'd5; B= 4'd3;
    $display("Time  A  B  opcode  | result  zero");
    opcode = 3'b000; #10;
    $display("%0t  %d  %d   %b     |   %d      %b", $time, A, B, opcode, result, zero);
    opcode = 3'b001; #10;
    $display("%0t  %d  %d   %b      |   %d      %b", $time, A, B, opcode, result, zero);

    opcode = 3'b010; #10;
    $display("%0t  %d  %d   %b      |   %d      %b", $time, A, B, opcode, result, zero);
 
    opcode = 3'b101;#10;
$display("%0t  %d  %d   %b      |   %d      %b", $time, A, B, opcode, result, zero);
     opcode = 3'b111; #10;
$display("%0t  %d  %d   %b      |   %d      %b", $time, A, B, opcode, result, zero);
      $finish;
  end
endmodule
    module ALU (
    input [7:0] A, B,
    input [2:0] opcode,
    output reg [15:0] result,
    output zero
);
    always @(*) begin
        case (opcode)
            3'b000: result = A + B;         // ADD
            3'b001: result = A - B;         // SUB
            3'b010: result = A * B;         // MUL
            3'b011: result = A & B;         // AND
            3'b100: result = A | B;         // OR
            3'b101: result = A ^ B;         // XOR
            3'b110: result = A << 1;        // Shift Left A
            3'b111: result = A >> 1;        // Shift Right A
            default: result = 0;
        endcase
    end
    // Zero flag logic
assign zero = (result == 0);

endmodule

